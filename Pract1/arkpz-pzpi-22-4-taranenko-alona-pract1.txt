Харківський університет радіоелектроніки 
Факультет комп'ютерних наук 
Кафедра програмної інженерії 
 
 
 
ЗВІТ 
до практичної роботи номер 1 з дисципліни 
"Аналіз та рефакторинг коду" 
на тему: "Правила оформлення програмного коду" 
 
 
 
Виконала
 ст. гр ПЗПІ-22-4 
Тараненко Альона Ігорівна
 
Перевірив
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович 
 
 
Харків 2024
МЕТА 

Метою роботи є вивчення основних правил оформлення коду на мові програмування Kotlin для забезпечення його читабельності, структурованості та підтримуваності. Дотримання узгодженого стилю іменування, уникнення дублювання коду, використання стандартних конструкцій мови та інших рекомендацій сприяє покращенню якості програмного забезпечення та спрощує процес командної розробки.
 
ВСТУП 

 	Kotlin — це статично типізована мова програмування, яка була створена для вирішення проблем, що виникають при розробці на Java. Її популярність зумовлена зрозумілим синтаксисом, високою безпекою та підтримкою функціонального програмування. Однак, незалежно від зручності мови, важливо пам'ятати, що якісний код — це не лише робочий код, а й код, який легко читати та підтримувати. Правила оформлення коду дозволяють зменшити кількість помилок, підвищити продуктивність команди та забезпечити єдині підходи до написання програм. У Kotlin, як і в будь-якій іншій мові, існують рекомендації, що стосуються правильного іменування змінних та функцій, уникнення дублювання коду та застосування оптимальних конструкцій мови. Ці правила важливі не лише для розробників-початківців, але й для досвідчених програмістів, які працюють у великих проєктах. Дотримання стандартів оформлення коду в Kotlin допомагає створювати програмні рішення, які є більш надійними, масштабованими та легкими у підтримці, що особливо актуально в умовах командної розробки.
 	 
РЕКОМЕНДАЦІЇ ДЛЯ НАПИСАННЯ КОДУ НА KOTLIN
 
1. Рекомендація: Короткі заголовки класів слід розміщувати в одному рядку, якщо кількість параметрів дозволяє.

// Правильний код
class Person(id: Int, name: String)

// Неправильний код
class Person(
    id: Int, name: String)


2. Рекомендація: Для довгих заголовків класів кожен параметр розміщувати на окремому рядку. Закриваючу дужку та наслідувані класи розміщувати на новому рядку.

// Правильний код
class Person(
    id: Int,
    name: String,
    surname: String
) : Human(id, name), KotlinMaker {
    // Тіло класу
}

// Неправильний код
class Person(id: Int,
    name: String,
    surname: String) : Human(id, name), KotlinMaker {
    // Тіло класу
}

3. Рекомендація: Імена пакетів повинні бути написані малими літерами без підкреслень.

// Правильне найменування
package org.example.project

// Неправильне найменування
package org.example.my_project

4. Рекомендація: Імена класів та об'єктів повинні використовувати UpperCamelCase.

// Правильний код
open class DeclarationProcessor { /*...*/ }
object EmptyDeclarationProcessor : DeclarationProcessor() { /*...*/ }

// Неправильний код
open class declarationprocessor { /*...*/ }
object empty_declaration_processor : declarationprocessor() { /*...*/ }

5. Рекомендація: Імена функцій та змінних повинні використовувати lowerCamelCase.

// Правильний код
fun processDeclarations() { /*...*/ }
var declarationCount = 1

// Неправильний код
fun process_declarations() { /*...*/ }
var Declaration_Count = 1

6. Рекомендація: Константи повинні використовувати SCREAMING_SNAKE_CASE.

// Правильний код
const val MAX_COUNT = 8
val USER_NAME_FIELD = "UserName"

// Неправильний код
const val MaxCount = 8
val userNameField = "UserName"

7. Рекомендація: Використовуйте чотири пробіли для відступів. Не використовуйте табуляцію.

// Правильний код
if (elements != null) {
    for (element in elements) {
        // ...
    }
}

// Неправильний код
if (elements != null)
{
    for (element in elements)
    {
        // ...
    }
}

8. Рекомендація: Ставте пробіли навколо бінарних операторів і між ключовими словами керування потоком та відкриваючою дужкою.

// Правильний код
if (elements != null) {
    // ...
}

// Неправильний код
if(elements!=null){
    // ...
}

9. Рекомендація: Структура каталогів повинна відповідати структурі пакетів.

// Правильна структура

src/
├── main/
│   └── kotlin/
│       ├── network/
│       │   └── socket/
│       └── utils/

// Неправильна структура

src/
├── main/
│   └── kotlin/
│       ├── org/
│       │   └── example/


















ВИСНОВКИ
 	 
Дотримання правил оформлення коду є важливим аспектом розробки якісного програмного забезпечення. Використання єдиного стилю написання коду, застосування функціональних можливостей Kotlin та уникнення зайвої складності допомагає зробити програмний код більш читабельним, підтримуваним і зручним для подальшої модифікації.

Мова Kotlin надає низку сучасних інструментів для підвищення ефективності коду, таких як функції-розширення, конструкція when, sealed класи, відкладена ініціалізація за допомогою lazy, а також робота з nullable значеннями через let, takeIf та інші методи. Використання цих можливостей дозволяє зменшити кількість помилок, підвищити продуктивність розробки та зробити код більш безпечним.

У роботі було продемонстровано, що правила оформлення коду допомагають уникати дублювання, полегшують обробку помилок та забезпечують структурованість програмних рішень. Важливо також пам’ятати про інтерполяцію рядків, обробку винятків та використання функціональних підходів замість класичних циклів і умовних конструкцій.

Загалом, правильне оформлення коду на Kotlin значно полегшує командну роботу, спрощує підтримку програмного продукту та сприяє зменшенню кількості критичних помилок. Дотримання рекомендованих практик оформлення коду є ключовим фактором для створення ефективного, масштабованого та надійного програмного забезпечення.


ДОДАТОК А 
Список використаних джерел 
 
	1.  Офіційна документація Kotlin .
URL:  https://kotlinlang.org/docs/coding-conventions.html#class-headers

 	  
ДОДАТОК Б 
Відео на YouTube 
 
URL: https://youtu.be/puonI-JZvWg 
ДОДАТОК В 
Презентація 
 
 

 
 

 
 

 

 

 

 

 
 

 

 

 
 

 
